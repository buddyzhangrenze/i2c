/*
 * Content: Creat a simple JNI program.
 * Author:  Buddy Zhang@2014.12.31
 */
setep 1:
	Create a sample.java.This program is underlying android interface,we 
	can use C/C++ to create interface for Java Lib.The demo like this:
    ====================================================================
	/*
	 * sample.java
	 */
	public class TestJni {
		public native void buddy();
		static {
			try {
				System.loadLibrary("TestJni");
			} catch(Throwable e) {
				System.out.println("The load Library problem");
			}
		}
	} // end sample.java
    ===================================================================
setup 2:
	use commond:
		javac -classpath ./ sample.java
	Use this cmd will be make out sample.class.Must use "-classpath ./",
	"-classpath" define Java Lib and "./" define the location of target 
	object.
	Next use cmd:
		javah -classpath ./ sample
	It will be make out sample.h.This file is the head of the enter for 
	Java JNI.The content are:
    ===================================================================
	/* DO NOT EDIT THIS FILE - it is machine generated */
	#include <jni.h>
	/* Header for class TestJni */

	#ifndef _Included_TestJni
	#define _Included_TestJni
	#ifdef __cplusplus
		extern "C" {
	#endif
				/*
				 * Class:     TestJni
				 * Method:    buddy
				 * Signature: ()V
			     */
		JNIEXPORT void JNICALL Java_TestJni_buddy(JNIEnv *, jobject);

	#ifdef __cplusplus
		}
	#endif
	#endif // end of sample.h
    ===================================================================
	Note:Must modify the "<jni.h>" as ""jni.h"".Because the Java-lib not 
	in current directe,and we should cp the "jni.h" and "jni_md.h" to 
	current directe,if not it will not pass on compile.
setup 3:
    Create C file,the content are:
    ===================================================================
	#include "jni.h"
	#include "TestJni.h"
    #include <stdio.h>

	JNIEXPORT void JNICALL Java_TestJni_buddy(JNIEnv *env,jobdect obj) 
    {
		printf("Hello buddy\n");
	}
	==================================================================
	The file include "jni.h","TestJni.h" and "stdio.h".Use commod to
	generate libxx.so,such as:
		gcc -fPIC -shared -o TestJni.so TestJni.c
	It will be generate TestJni.so,and cp TestJni.so to /usr/lib or
	/usr/lib/jni,such as:
		sudo cp TestJni.so /usr/lib
		or
		sudo cp TestJni.so /usr/lib/jni
setup 4:
	Create the Java file for testing.The content are:
	==================================================================
	public class HelloWorld {
		public static void main(String argv[]) {
			new HelloWorld();
		}
		public HelloWorld() {
			new TestJni().buddy();
		}
	}
	==================================================================
    Compile this file and use cmd:
		javac -classpath ./ HelloWorld.java
	Running java program.
		java -classpath ./ HelloWorld
		$: Hello buddy
setup 5:
	Note!It will failure in "java -classpath ./ HelloWorld".Because the 
	program can not find the TestJni.so,and we should input cmd:
		export LD_LIBRARY_PATH="/usr/lib/jni":$LD_LIBRARY_PATH
	The "/usr/lib/jni" is lib of TestJni.so,it will help Java program find
	the ld_lib.
	Note!Must define ld "libxxx.so",if not will not load lib.
